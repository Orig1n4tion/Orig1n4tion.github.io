<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2021/01/24/C/"/>
      <url>2021/01/24/C/</url>
      
        <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><strong>C语言代码是如何运行起来的</strong></p><p><a href="https://blog.csdn.net/s1998f/article/details/103575961">https://blog.csdn.net/s1998f/article/details/103575961</a></p><p><strong>在C语言中的声明、定义、初始化、赋值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">  extern   int a;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> int a;//定义变量a，执行后就已经建立存储空间</p><p>extern int a;//只是声明了变量a存在，当查找变量a的内存地址时，会返回CXX0017: 错误: 没有找到符号“a”</p><p>在函数中也是类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">void fun1();  &#x2F;&#x2F;函数声明</span><br><span class="line"></span><br><span class="line">void fun1()&#123;  &#x2F;&#x2F;函数定义</span><br><span class="line">    cout&lt;&lt;&quot;fun1&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>C语言中的内存分配</strong></p><p>内存分配的两种方式：堆和栈。 int i ;这样的声明就立刻在栈里分配了内存空间。 int *i; 这样的声明就立刻在栈里给这个指针（指针本身）分配了空间。  i = malloc(100); 这句是在堆里分配空间并且把这个空间地址记录在i这个变量在栈里的地址那</p><p><img src="https://raw.githubusercontent.com/Orig1n4tion/Photo/master/DS/20210111100925.png"></p><p>可以看到int a;之后，在VS中的可以找到a的内存地址，并且a的值为-858993460，即为0xcccccccc的十进制表示<br>原因：未初始化的栈区编译器默认(在VS2010下)都按照cc去填充了。另外补充，在gcc编译器则是按照0填充的</p><p>也就说（在VS2010）声明变量的时候就完成了内存地址的分配，只是变量的值按照0xcccccccc填充</p><p>变量在内存中的分配</p><p><a href="https://www.cnblogs.com/bingdaocaihong/p/6949891.html">https://www.cnblogs.com/bingdaocaihong/p/6949891.html</a><br><a href="https://blog.csdn.net/chenyiming_1990/article/details/9476181">https://blog.csdn.net/chenyiming_1990/article/details/9476181</a></p><p><strong>数据在内存中的存储</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">    int a &#x3D; 100;</span><br><span class="line">    char str[20] &#x3D; &quot;test&quot;;</span><br><span class="line">    printf(&quot;%#X, %#X\n&quot;, &amp;a, str);</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;c语言中%x的意思是16进制输出</span><br><span class="line">&#x2F;&#x2F;c语言中符合%#的意思是带格式输出。比如，%#x的意思是在输出前面加上0x，%#b的意思是在输出前面加上0b。</span><br></pre></td></tr></table></figure><p>运行结果，返回变量a与str的内存地址<br>0X10FFA68, 0X10FFA4C，反复运行发现地址是随机4的</p><p><img src="https://raw.githubusercontent.com/Orig1n4tion/Photo/master/DS/20210111110436.png"></p><p>定义一个整型变量a，赋值为100。在地址栏中对a进行取地址操作，就可以得到a在内存中的存储情况。</p><p>a在内存中按照十六进制存储。a的地址就是0X10FFA68，00的地址就是0X10FFA69，以此类推。这种高位在左，低位在右的排列方式称为<strong>小端字节序</strong>。</p><p><strong>字节序</strong></p><p>字节序就是研究数字的高位在内存的高地址还是低地址。小端字节序就是高位放在高地址，大端字节序就是高位放在低地址。可以用小（低位）小（低地址）小（小端）来记忆。一台机器的字节序取决于CPU，小端字节序在PC上是主流。</p><p><strong>原码、反码、补码</strong></p><p>若是正数，则按照原码来存；若是负数，则按照补码的方式来存。也可以理解成正数的补码就是自身。补码存在的意义在于把加法和减法统一成加法，使硬件实现更简单。<br>  原码-&gt;取反+1-&gt;补码<br>  补码-&gt;取反+1-&gt;原码</p><p>在二进制中，收尾为1的为负数</p><p><strong>浮点数在内存中的存储</strong></p><p>单精度浮点数存储模型</p><p><img src="https://raw.githubusercontent.com/Orig1n4tion/Photo/master/DS/20210111111504.png"></p><p>S是符号位，0表示正，1表示负。E是指数部分，M是有效数字。M占用的bit位越多，数据的精度就越高；E占用的bit位越多，数据的范围就越大。<br>由于double类型的精度和范围均比float大，实际开发中优先考虑使用double。</p><p>由于浮点数在内存中存储，很多时候有误差，故实际开发中，不能在浮点数之间使用==进行比较。</p><p><strong>字符指针</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main()&#123;</span><br><span class="line">  char str1[] &#x3D; &quot;hehe&quot;;</span><br><span class="line">char str2[] &#x3D; &quot;hehe&quot;;</span><br><span class="line">char* str3 &#x3D; &quot;hehe&quot;;</span><br><span class="line">char* str4 &#x3D; &quot;hehe&quot;;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 此处数组本来是不能直接比较的. </span><br><span class="line">&#x2F;&#x2F; 但是指针可以. 此处数组名又隐式转成指针了. </span><br><span class="line">if (str1 &#x3D;&#x3D; str2) &#123;</span><br><span class="line">printf(&quot;相等\n&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;不相等\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (str3 &#x3D;&#x3D; str4) &#123;</span><br><span class="line">printf(&quot;相等\n&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">printf(&quot;不相等\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现第一个不相等，第二个相等。首先明确，进行比较的是地址，而不是字符串的内容。str1和str2所指向的字符串虽然内容相同，但是地址不同，故比较地址时输出不相等。而str3和str4都指向”hehe”这个字符串，所以存储了同一个地址，故相等。<br>注意：C语言中，想要比较字符串的内容，不能直接使用==，而要使用strcmp函数。</p><p><strong>指针数组和数组指针</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指针数组</span></span><br><span class="line"><span class="keyword">int</span>* arr[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//数组指针</span></span><br><span class="line"><span class="keyword">int</span> arr2[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">int</span>(*p)[<span class="number">4</span>] = &amp;arr2;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>指针数组是数组，数组里存储的元素全部是指针。数组指针是指针，这个指针指向一整个数组，即&amp;arr2+1是整个数组的长度。</p><p>数组作为函数参数时，有两种传参方式：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> arr[<span class="number">3</span>][<span class="number">5</span>])</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> (*p)[<span class="number">5</span>])</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//若 int a[5]，a的类型就是int*</span></span><br><span class="line"><span class="comment">//若 int a[3][5]，a的类型就是int(*)[5]</span></span><br><span class="line"><span class="comment">//若 int a[2][3][5]，a的类型就是int(*)[3][5],以此类推。</span></span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/th15t13/article/details/109642874">数据在内存中的存储和指针进阶</a></p><p><strong>C语言中<code>-858993460</code>的由来。</strong></p><p>在上面的代码实例中，我们很明显可以看出，C编译器，定义变量的<code>栈空间</code>填充的值默认是<code>CC</code>，因为<code>i</code>是一个int类型，那么即就是占四个字节。所以 ，未初始化的i填充的字节数就是 <code>0xCCCCCCCC</code>,那么输出</p><p><code>-858993460</code>又是什么鬼？，其实我们不妨把 <code>0xCCCCCCCC</code>转换为二进制看看。</p><p><code>0xCCCCCCCC</code>的二进制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11001100110011001100110011001100</span><br></pre></td></tr></table></figure><p>了解过负数在计算机是怎么存储的同学们都知道，二进制首位 是1 ,那么就代表这是个负数，所以我们不妨求其反码：(符号位不变，其他位取反)</p><p>原码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">11001100110011001100110011001100</span><br></pre></td></tr></table></figure><p>反码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10110011001100110011001100110011</span><br></pre></td></tr></table></figure><p>再求其补码：（反码的基础上+1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10110011001100110011001100110100</span><br></pre></td></tr></table></figure><p>那么这个数，再计算机内存的二进制即就是上面的补码，我们可以转换为十进制，答案就是 <code>-858993460</code></p><p>还有就是变量str出现了烫，其实跟乱码没有关系，乱码是解码跟编码不同才会乱码，因为 中文 烫的 16进制刚好就是 <code>0xCCCC</code>;可以检查下程序哪里数组越界或者字符串是不是‘\0’结尾的。</p><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p><strong>为什么需要指针？</strong></p><p>指针解决了一些编程中基本的问题。</p><p>第一，指针的使用使得不同区域的代码可以轻易的共享内存数据。当然你也可以通过数据的复制达到相同的效果，但是这样往往效率不太好，因为诸如结构体等大型数据，占用的字节数多，复制很消耗性能。但使用指针就可以很好的避免这个问题，因为任何类型的指针占用的字节数都是一样的（根据平台不同，有4字节或者8字节或者其他可能）。</p><p>第二，指针使得一些复杂的链接性的数据结构的构建成为可能，比如链表，链式二叉树等等。</p><p>第三，有些操作必须使用指针。如操作申请的堆内存。</p><p><strong>什么是指针？</strong></p><p><em>指针是程序数据在内存中的地址，而指针变量是用来保存这些地[址的变量。</em></p><p><a href="https://www.zhihu.com/question/29882140/answer/45914872">指针变量为什么加前缀p?</a></p><p><a href="http://c.biancheng.net/c/80/">http://c.biancheng.net/c/80/</a><br><a href="https://www.cnblogs.com/lulipro/p/7460206.html">https://www.cnblogs.com/lulipro/p/7460206.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/24/%E5%9F%BA%E7%A1%80/"/>
      <url>2021/01/24/%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="零零碎碎"><a href="#零零碎碎" class="headerlink" title="零零碎碎"></a>零零碎碎</h3><p><strong>冯·诺依曼架构</strong></p><p>数学家冯·诺依曼提出了计算机制造的三个基本原则，即采用二进制逻辑、程序存储执行以及计算机由五个部分组成（运算器、控制器、存储器、输入设备、输出设备），这套理论被称为冯·诺依曼体系结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">想象一下我们在做数学考试：</span><br><span class="line"></span><br><span class="line">输入设备就是考卷，题目都在卷子上。同样的计算机要计算哪些数据，怎么计算，都来自于输入设备。</span><br><span class="line">内存就是草稿纸，我们会把要计算的题目抄写到草稿纸上，用草稿纸记录计算的中间过程。同样的，计算机要把来自输入设备的数据，以及要怎么计算这些数据的指令，从输入设备载入到内存中，并且把每一步计算的结果写入到内存。</span><br><span class="line">运算单元是计算器，我们用计算器来计算每一步的加减乘除。同样的，计算机有专用的运算单元，来计算数据。（假设这次数学考试允许带计算器）</span><br><span class="line">控制单元就是我们自己了。我们根据试卷上的算式，来决定第一步是算乘法还是加法，乘法是哪两个数相乘，加法又是哪两个数相加。</span><br><span class="line">输出设备就是答题卡。我们计算完一道题后，需要把草稿纸上的结果抄写在答题卡上。</span><br><span class="line">其中，我们自己+计算器的组合，在计算机里面是同一个设备——CPU（Central Processing Unit，中央处理器）。</span><br></pre></td></tr></table></figure><p><strong>CPU、内存</strong></p><p>CPU，全称中央处理器。</p><p>CPU可以直接访问存储在内存中的数据。不可以直接访问存储在外存中的数据，外存数据必须先读进内存再供CPU访问。</p><p>内存，也称为主存储器和内存储器。是外存与CPU进行沟通的桥梁，<em>计算机所处理的数据都要经过内存</em>，也就是说计算中的所有程序都是在内存中进行的。起作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。</p><p>计算机运行一个程序时，优先调用并执行一部分必要的程序，在需要其他数据的时候便从硬盘 或者硬盘缓存，或者内存缓冲区读取数据，以供程序运行。</p><p><strong>缓冲区（Buffer）与缓存（Cache）</strong></p><p>缓存：将缓慢的访问结果保存下来。<br>缓冲：将突发快速的访问平稳下来。</p><p>缓冲区(Buffer)就是在<strong>内存</strong>中预留指定大小的存储空间用来对I/O的数据做临时存储，这部分预留的内存空间叫缓冲区。</p><p>缓冲区存在的意义：高速设备与低速设备的不匹配，势必会让高速设备花时间等待低速设备，我们可以在这两者之间设立一个缓冲区。</p><p>缓存</p><p>缓存在CPU、硬盘、浏览器中都有应用。</p><p>CPU的Cache，中文名称是高速缓冲存储器，读写速度很快，几乎与CPU一样。由于CPU的运算速度太快，内存的数据存取速度无法跟上CPU的速度，所以在cpu与内存间设置了cache为cpu的数据快取区。</p><p>磁盘也有cache,硬盘的cache作用就类似于CPU的cache，它解决了总线接口的高速需求和读写硬盘的矛盾以及对某些扇区的反复读取。</p><p>浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览，并且可以减少服务器的压力。这个过程与下载非常类似，不过下载是用户的主动过程，并且下载的数据一般是长时间保存，游览器的缓存的数据只是短时间保存，可以人为的清空</p><p><strong>数据类型</strong></p><p><strong>进制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">十六进制 hexadecimal 0x或0X开头</span><br><span class="line"></span><br><span class="line">八进制 octal 0开头</span><br><span class="line"></span><br><span class="line">二进制 binary 0b或0B开头</span><br><span class="line"></span><br><span class="line">十进制 decimal 无标志</span><br><span class="line"></span><br><span class="line">至于为什么十六进制前缀是0x，就是这么规定的</span><br><span class="line">[0]是便于解释器的识别，[x]是十六进制的标志，可能是hex吧</span><br></pre></td></tr></table></figure><p><strong>C语言中的%</strong></p><p>有两种释义。一是求余，经常会用到判断一个数是不是能被另一个整除；二是引导符，用于引导输入输出项表列的格式，例如%#X，引导输出以0X为前缀的字符串。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2021/01/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="零零碎碎"><a href="#零零碎碎" class="headerlink" title="零零碎碎"></a>零零碎碎</h3><p><strong>冯·诺依曼架构</strong></p><p>数学家冯·诺依曼提出<strong>了计算机制</strong>造的三个基<em>本原则</em>，即采<code>用二</code>进制逻辑、程序存储执行以及计算机由五个部分组成（运算器、控制器、存储器、输入设备、输出设备），这套理论被称为冯·诺依曼体系结构。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">想象一下我们在做数学考试：</span><br><span class="line"></span><br><span class="line">输入设备就是考卷，题目都在卷子上。同样的计算机要计算哪些数据，怎么计算，都来自于输入设备。</span><br><span class="line">内存就是草稿纸，我们会把要计算的题目抄写到草稿纸上，用草稿纸记录计算的中间过程。同样的，计算机要把来自输入设备的数据，以及要怎么计算这些数据的指令，从输入设备载入到内存中，并且把每一步计算的结果写入到内存。</span><br><span class="line">运算单元是计算器，我们用计算器来计算每一步的加减乘除。同样的，计算机有专用的运算单元，来计算数据。（假设这次数学考试允许带计算器）</span><br><span class="line">控制单元就是我们自己了。我们根据试卷上的算式，来决定第一步是算乘法还是加法，乘法是哪两个数相乘，加法又是哪两个数相加。</span><br><span class="line">输出设备就是答题卡。我们计算完一道题后，需要把草稿纸上的结果抄写在答题卡上。</span><br><span class="line">其中，我们自己+计算器的组合，在计算机里面是同一个设备——CPU（Central Processing Unit，中央处理器）。</span><br></pre></td></tr></table></figure><p><strong>CPU、内存</strong></p><p>CPU，全称中央处理器。</p><p>CPU可以直接访问存储在内存中的数据。不可以直接访问存储在外存中的数据，外存数据必须先读进内存再供CPU访问。</p><p>内存，也称为主存储器和内存储器。是外存与CPU进行沟通的桥梁，<em>计算机所处理的数据都要经过内存</em>，也就是说计算中的所有程序都是在内存中进行的。起作用是用于暂时存放CPU中的运算数据，以及与硬盘等外部存储器交换的数据。</p><p>计算机运行一个程序时，优先调用并执行一部分必要的程序，在需要其他数据的时候便从硬盘 或者硬盘缓存，或者内存缓冲区读取数据，以供程序运行。</p><p><strong>缓冲区（Buffer）与缓存（Cache）</strong></p><p>缓存：将缓慢的访问结果保存下来。<br>缓冲：将突发快速的访问平稳下来。</p><p>缓冲区(Buffer)就是在<strong>内存</strong>中预留指定大小的存储空间用来对I/O的数据做临时存储，这部分预留的内存空间叫缓冲区。</p><p>缓冲区存在的意义：高速设备与低速设备的不匹配，势必会让高速设备花时间等待低速设备，我们可以在这两者之间设立一个缓冲区。</p><p>缓存</p><p>缓存在CPU、硬盘、浏览器中都有应用。</p><p>CPU的Cache，中文名称是高速缓冲存储器，读写速度很快，几乎与CPU一样。由于CPU的运算速度太快，内存的数据存取速度无法跟上CPU的速度，所以在cpu与内存间设置了cache为cpu的数据快取区。</p><p>磁盘也有cache,硬盘的cache作用就类似于CPU的cache，它解决了总线接口的高速需求和读写硬盘的矛盾以及对某些扇区的反复读取。</p><p>浏览器缓存（Browser Caching）是为了节约网络的资源加速浏览，浏览器在用户磁盘上对最近请求过的文档进行存储，当访问者再次请求这个页面时，浏览器就可以从本地磁盘显示文档，这样就可以加速页面的阅览，并且可以减少服务器的压力。这个过程与下载非常类似，不过下载是用户的主动过程，并且下载的数据一般是长时间保存，游览器的缓存的数据只是短时间保存，可以人为的清空</p><p><strong>数据类型</strong></p><p><strong>在C语言中的声明、定义、初始化、赋值</strong></p><p> int a;是声明变量。</p><p>赋值就是 变量 = 某个值。</p><p>声明变量的时候同时赋值，叫初始化，也就是说初始化=声明+赋值。</p><p><strong>进制</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">十六进制 hexadecimal 0x或0X开头</span><br><span class="line"></span><br><span class="line">八进制 octal 0开头</span><br><span class="line"></span><br><span class="line">二进制 binary 0b或0B开头</span><br><span class="line"></span><br><span class="line">十进制 decimal 无标志</span><br><span class="line"></span><br><span class="line">至于为什么十六进制前缀是0x，就是这么规定的</span><br><span class="line">[0]是便于解释器的识别，[x]是十六进制的标志，可能是hex吧</span><br></pre></td></tr></table></figure><p><strong>C语言中的%</strong></p><p>有两种释义。一是求余，经常会用到判断一个数是不是能被另一个整除；二是引导符，用于引导输入输出项表列的格式，例如%#X，引导输出以0X为前缀的字符串。</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">char</span> str[<span class="number">20</span>] = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%#X, %#X\n&quot;</span>, &amp;a, str);</span><br><span class="line">system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//c语言中%x的意思是16进制输出</span></span><br><span class="line"><span class="comment">//c语言中符合%#的意思是带格式输出。比如，%#x的意思是在输出前面加上0x，%#b的意思是在输出前面加上0b。</span></span><br></pre></td></tr></table></figure><p>运行结果，返回变量a与str的内存地址<br>0X12FFEA0, 0X12FFE84</p><p><img src="https://raw.githubusercontent.com/Orig1n4tion/Photo/master/DS/20210108231700.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/01/24/hello-world/"/>
      <url>2021/01/24/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
